name: Linux Build

# This workflow depends on pre-built Docker images from build-qt-environments.yml
# Ensure that workflow has been run successfully before running this build

on:
  push:
    branches: ["main", "dev"]
    tags: ["v*"]
  pull_request:
    branches: ["dev"]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Type of Qt build to use'
        required: true
        default: 'both'
        type: choice
        options:
        - 'shared'
        - 'static'
        - 'both'
      ubuntu_version:
        description: 'Ubuntu base image version'
        required: false
        default: '22.04'
        type: choice
        options:
        - '22.04'
        - '24.04'

env:
  ARTIFACT: openterfaceQT
  SOURCE_DIR: ${{ github.workspace }}
  QT_VERSION: 6.6.3
  REGISTRY: ghcr.io

jobs:
  build-shared:
    if: ${{ github.event.inputs.build_type == 'shared' || github.event.inputs.build_type == 'both' || github.event_name != 'workflow_dispatch' }}
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set Shared or Static build in env
        run: |
          if [ "${{ github.event.inputs.environment_type || 'static' }}" = "shared" ]; then
            echo "SHARED_OR_STATIC=shared" >> $GITHUB_ENV
          else
            echo "SHARED_OR_STATIC=static" >> $GITHUB_ENV
          fi

      - name: Set lowercase image name
        env:
          OWNER: ${{ github.repository_owner }}
          SHARED: ${{ env.SHARED_OR_STATIC }}
        run: |
          OWNER=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')
          echo "IMAGE_NAME_LOWER=${OWNER}/${SHARED}-qtbuild" >> $GITHUB_ENV
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull pre-built shared Qt Docker Image
        run: |
          echo "Pulling pre-built shared Qt Docker image for amd64..."
          
          IMAGE_TAG="ubuntu-${{ github.event.inputs.ubuntu_version || '22.04' }}-amd64"
          echo "Checking for image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete:$IMAGE_TAG"
          
          
          # Check if image exists in registry
          if docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete:$IMAGE_TAG > /dev/null 2>&1; then
            echo "Pre-built image found, pulling..."
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete:$IMAGE_TAG

            echo "Successfully pulled pre-built shared Qt Docker image for amd64"
          else
            echo "Error: Pre-built shared Qt Docker image not found in registry for amd64"
            echo "Looking for: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete:$IMAGE_TAG"
            echo "Please run the 'Build Qt Environments' workflow first to build the required Docker images"
            echo "Workflow URL: https://github.com/${{ github.repository }}/actions/workflows/build-qt-environments.yml"
            exit 1
          fi
          
          # Tag the architecture-specific image as latest for local use
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete:$IMAGE_TAG ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete:latest
          
          # Verify the image was pulled successfully
          docker images | grep qtbuild-complete || {
            echo "Error: Failed to verify shared Qt Docker image"
            exit 1
          }

      - name: Get all tags for correct version determination
        working-directory: ${{ github.workspace }}
        run: |
          git fetch --all --tags -f

      - name: Read version from version.h
        id: read_version
        run: |
          VERSION=$(grep -oP '#define APP_VERSION "\K[^"]+' resources/version.h)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Update and compile translations
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace/src \
            -v ${{ github.workspace }}/build-script/docker-translation.sh:/translation-script.sh:ro \
            -w /workspace/src \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete:latest \
            bash /translation-script.sh

      - name: Build, package via docker-build-shared.sh (amd64)
        run: |
          mkdir -p ${{ runner.temp }}/build-shared
          docker run --rm \
            -v ${{ github.workspace }}:/workspace/src \
            -v ${{ runner.temp }}/build-shared:/workspace/build \
            -w /workspace/src \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete:latest \
            bash /workspace/src/build-script/docker-build-shared.sh
          echo "BUILD_DIR=${{ runner.temp }}/build-shared" >> $GITHUB_ENV

      - name: Upload shared .deb
        uses: actions/upload-artifact@v4
        with:
          name: openterfaceQT.linux.amd64.shared.deb
          path: ${{ runner.temp }}/build-shared/openterfaceQT_*.deb
          if-no-files-found: error

      - name: Upload shared .AppImage
        uses: actions/upload-artifact@v4
        with:
          name: openterfaceQT.linux.amd64.shared.AppImage
          path: ${{ runner.temp }}/build-shared/openterfaceQT_*.AppImage
          if-no-files-found: error

      - name: Upload shared .rpm
        uses: actions/upload-artifact@v4
        with:
          name: openterfaceQT.linux.amd64.shared.rpm
          path: ${{ runner.temp }}/build-shared/openterfaceQT_*.rpm
          if-no-files-found: error

  build-static:
    if: ${{ github.event.inputs.build_type == 'static' || github.event.inputs.build_type == 'both' || github.event_name != 'workflow_dispatch' }}
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set lowercase image name
        run: echo "IMAGE_NAME_LOWER=$(echo '${{ github.repository_owner }}/openterface-qtbuild' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull pre-built Static Qt Docker Image
        run: |
          echo "Pulling pre-built Static Qt Docker image..."
          
          IMAGE_TAG="ubuntu-${{ github.event.inputs.ubuntu_version || '22.04' }}-amd64"
          echo "Checking for image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete:$IMAGE_TAG"
          
          # Check if image exists in registry
          if docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete:$IMAGE_TAG > /dev/null 2>&1; then
            echo "Pre-built image found, pulling..."
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete:$IMAGE_TAG
            echo "Successfully pulled pre-built Static Qt Docker image for amd64"
          else
            echo "Error: Pre-built Static Qt Docker image not found in registry for amd64"
            echo "Looking for: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete:$IMAGE_TAG"
            echo "Please run the 'Build Qt Environments' workflow first to build the required Docker images"
            echo "Workflow URL: https://github.com/${{ github.repository }}/actions/workflows/build-qt-environments.yml"
            exit 1
          fi
          
          # Tag the architecture-specific image as latest for local use
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete:$IMAGE_TAG ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete:latest
          
          # Verify the image was pulled successfully
          docker images | grep qtbuild-complete || {
            echo "Error: Failed to verify Static Qt Docker image"
            exit 1
          }

      - name: Install packaging tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y rpm

      - name: Get all tags for correct version determination
        working-directory: ${{ github.workspace }}
        run: |
          git fetch --all --tags -f

      - name: Read version from version.h
        id: read_version
        run: |
          VERSION=$(grep -oP '#define APP_VERSION "\K[^"]+' resources/version.h)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Update and compile translations (Static)
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace/src \
            -v ${{ github.workspace }}/build-script/docker-translation.sh:/translation-script.sh:ro \
            -w /workspace/src \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete:latest \
            bash /translation-script.sh

      - name: Build via docker-build-static.sh (amd64)
        run: |
          mkdir -p ${{ runner.temp }}/build-static
          docker run --rm \
            -v ${{ github.workspace }}:/workspace/src \
            -v ${{ runner.temp }}/build-static:/workspace/build \
            -w /workspace/src \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete:latest \
            bash /workspace/src/build-script/docker-build-static.sh
          echo "BUILD_DIR=${{ runner.temp }}/build-static" >> $GITHUB_ENV


      - name: Create Portable Application (No packaging)
        working-directory: ${{ runner.temp }}
        run: |
          PORTABLE_DIR="openterfaceQT.linux.amd64.portable"
          mkdir -p $PORTABLE_DIR
          # Copy the static binary directly to root of portable dir (no bin/ subdirectory)
          cp ${{ env.BUILD_DIR }}/openterfaceQT $PORTABLE_DIR/openterfaceQT-portable
          chmod +x $PORTABLE_DIR/openterfaceQT-portable

          cp ${{ github.workspace }}/LICENSE $PORTABLE_DIR/ || echo "No LICENSE found"


      - name: Upload Portable artifact (No packaging)
        uses: actions/upload-artifact@v4
        with:
          name: openterfaceQT.linux.amd64.portable
          path: ${{ runner.temp }}/openterfaceQT.linux.amd64.portable/
          if-no-files-found: error