---
name: Linux Build

on:
  push:
    branches: ["main", "dev"]
    tags: ["v*"]
  pull_request:
    branches: ["dev"]
  workflow_dispatch:

env:
  ARTIFACT: openterfaceQT
  SOURCE_DIR: ${{ github.workspace }}
  QT_VERSION: 6.4.2

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install prerequisites
        run: |
          sudo apt update -y
          sudo apt upgrade -y
          sudo apt install build-essential

      - name: Set up QEMU
        if: matrix.arch == 'arm64'
        uses: docker/setup-qemu-action@v3

      - name: Install Qt for AMD64
        if: matrix.arch == 'amd64'
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          host: linux
          target: desktop
          arch: gcc_64
          modules: qtmultimedia qtserialport

      - name: Install Qt for ARM64
        if: matrix.arch == 'arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y qt6-base-dev qt6-multimedia-dev libqt6svg6-dev libqt6serialport6-dev libgl1-mesa-dev
          echo "Qt6_DIR=/usr/lib/aarch64-linux-gnu/cmake/Qt6" >> $GITHUB_ENV

      - name: Get all tags for correct version determination
        working-directory: ${{ github.workspace }}
        run: |
          git fetch --all --tags -f

      - name: Read version from version.h
        id: read_version
        run: |
          VERSION=$(grep -oP '#define VERSION "\K[^"]+' version.h)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create build directory
        run: mkdir ${{ runner.temp }}/build

      - name: Configure And Build
        working-directory: ${{ runner.temp }}/build
        run: |
          qmake6 ${{ github.workspace }} && make -j$(nproc)

      - name: Create deb package
        working-directory: ${{ runner.temp }}
        run: |
          mkdir -p package/DEBIAN
          # Create control file with package information
          echo "Package: ${{ env.ARTIFACT }}
          Version: ${{ env.VERSION }}
          Section: base
          Priority: optional
          Architecture: ${{ matrix.arch }}
          Depends: libqt6core6 (>= 6.4.2), libqt6multimedia6 (>= 6.4.2), libqt6serialport6 (>= 6.4.2), libqt6svg6 (>= 6.4.2)
          Maintainer: TechXArtisan <info@techxartisan.com>
          Description: OpenterfaceQT Mini-KVM Linux Edition" > package/DEBIAN/control
          # Copy files to package directory
          mkdir -p package/usr/bin
          cp -r build/openterfaceQT package/usr/bin

          # Add icon to the package
          mkdir -p package/usr/share/icons/hicolor/256x256/apps/
          cp ${{ github.workspace }}/images/icon_256.png package/usr/share/icons/hicolor/256x256/apps/openterfaceQT.png

          # Create .desktop file
          mkdir -p package/usr/share/applications/
          cat > package/usr/share/applications/openterfaceQT.desktop << EOF
          [Desktop Entry]
          Version=1.0
          Type=Application
          Name=OpenterfaceQT
          Exec=/usr/bin/openterfaceQT
          Icon=openterfaceQT
          Comment=OpenterfaceQT Application
          Categories=Utility;
          EOF

          # Build deb package
          mv package ${{ env.ARTIFACT }}_${{ env.VERSION }}_${{ matrix.arch }}
          dpkg-deb --build ${{ env.ARTIFACT }}_${{ env.VERSION }}_${{ matrix.arch }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: openterfaceqt_${{ matrix.arch == 'arm64' && 'arm64' || matrix.arch }}.deb
          path: ${{ runner.temp }}/${{ env.ARTIFACT }}_${{ env.VERSION }}_${{ matrix.arch }}.deb
          if-no-files-found: error

  build-raspbian:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Raspbian image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.raspbian
          platforms: linux/arm/v7
          push: false
          load: true
          tags: openterface-raspbian:latest

      - name: Extract built artifact
        run: |
          docker create --name temp openterface-raspbian:latest
          docker cp temp:/app/build/openterfaceQT ./openterfaceQT
          docker rm temp

      - name: Create Raspbian package
        run: |
          mkdir -p package/DEBIAN
          VERSION=$(grep -oP '#define VERSION "\K[^"]+' version.h)
          echo "Package: ${{ env.ARTIFACT }}
          Version: $VERSION
          Section: base
          Priority: optional
          Architecture: armhf
          Depends: libqt6core6 (>= 6.5.3), libqt6multimedia6 (>= 6.5.3), libqt6serialport6 (>= 6.5.3), libqt6svg6 (>= 6.5.3)
          Maintainer: TechXArtisan <info@techxartisan.com>
          Description: OpenterfaceQT Mini-KVM Raspbian Edition" > package/DEBIAN/control
          
          mkdir -p package/usr/bin
          cp ./openterfaceQT package/usr/bin/
          
          mkdir -p package/usr/share/icons/hicolor/256x256/apps/
          cp images/icon_256.png package/usr/share/icons/hicolor/256x256/apps/openterfaceQT.png
          
          mkdir -p package/usr/share/applications/
          cat > package/usr/share/applications/openterfaceQT.desktop << EOF
          [Desktop Entry]
          Version=1.0
          Type=Application
          Name=OpenterfaceQT
          Exec=/usr/bin/openterfaceQT
          Icon=openterfaceQT
          Comment=OpenterfaceQT Application
          Categories=Utility;
          EOF
          
          dpkg-deb --build package ${{ env.ARTIFACT }}_${VERSION}_armhf.deb

      - name: Upload Raspbian artifact
        uses: actions/upload-artifact@v4
        with:
          name: openterfaceqt_armhf.deb
          path: ${{ env.ARTIFACT }}_*_armhf.deb
          if-no-files-found: error
