---
name: Windows Build

on:
  push:
    branches: ["main", "dev"]
    tags: ["v*"]
  pull_request:
    branches: ["dev"]
  workflow_dispatch:

defaults:
  run:
    shell: cmd

env:
  ARTIFACT: "${{ vars.MY_APP_EXE_NAME }}"
  SOURCE_DIR: ${{ github.workspace }}
  QT_VERSION: 6.4.3

jobs:
  build:
    runs-on: windows-2019
    environment: ${{ github.event.inputs.TARGET_ENV || 'Openterface_build' }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Update version
        run: |
          import os
          from datetime import datetime

          # Read current version
          with open('version.txt', 'r') as f:
            version = f.read().strip()

          # Split version into parts
          major, minor, patch = version.split('.')

          # Increment patch version
          patch = str(int(patch) + 1)

          # Get current date
          date = datetime.now().strftime("%Y%m%d")

          # Create new version string
          new_version = f"{major}.{minor}.{patch}.{date}"

          # Write new version to file
          with open('version.txt', 'w') as f:
            f.write(new_version)

          print(f"Updated version to {new_version}")

          # Set environment variable for use in later steps
          os.system(f'echo "NEW_VERSION={new_version}" >> $GITHUB_ENV')
        shell: python

      - name: Get all tags for correct version determination
        working-directory: ${{ github.workspace }}
        run: |
          git fetch --all --tags -f

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          host: windows
          target: desktop
          arch: win64_msvc2019_64
          dir: ${{ runner.temp }}
          modules: qtmultimedia qtserialport
          setup-python: false

      - name: Download and Unzip Jom
        working-directory: ${{ runner.temp }}
        run: |
          curl -L -o jom.zip "http://download.qt.io/official_releases/jom/jom.zip"
          7z x jom.zip -ojom

      - name: Create build directory
        run: mkdir ${{ runner.temp }}\build

      - name: Set up Visual Studio shell
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - name: Build
        working-directory: ${{ runner.temp }}\build
        run: |
          qmake -r ${{ env.SOURCE_DIR }}\openterfaceQT.pro
          ${{ runner.temp }}\jom\jom -j2
          mkdir package
          mkdir package\driver
          copy release\openterfaceQT.exe package
          copy ${{ env.SOURCE_DIR }}\driver\windows\* package\driver
          cd package
          windeployqt --qmldir ${{ env.SOURCE_DIR }} openterfaceQT.exe --compiler-runtime
          copy C:\Windows\System32\concrt140.dll . 
          copy C:\Windows\System32\vccorlib140.dll .
          copy C:\Windows\System32\msvcp140.dll .

      - name: Move directory
        working-directory: ${{ runner.temp }}\build
        run: |
          move /Y package ${{ env.SOURCE_DIR }}
        shell: cmd

      - name: Compile .ISS to .EXE Installer
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
        with:
          path: installer.iss
          options: /O+ /DWorkingDir="${{ runner.temp }}\build"  /DMyAppVersion="${{ vars.MY_APP_VERSION }}" /DMyAppPublisher="${{ vars.MY_APP_PUBLISHER }}" /DMyAppURL="${{ vars.MY_APP_URL }}"

      - name: Save build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT }}
          path: ${{ env.SOURCE_DIR }}\Output\openterface-installer.exe
          if-no-files-found: error

      - name: Commit and push if build successful
        if: success()
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add version.txt
          git commit -m "Bump version to ${{ env.NEW_VERSION }}" -a
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}